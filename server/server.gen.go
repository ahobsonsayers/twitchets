// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/ahobsonsayers/twitchets/config"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// PutConfigJSONRequestBody defines body for PutConfig for application/json ContentType.
type PutConfigJSONRequestBody = externalRef0.Config

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current configuration
	// (GET /config)
	GetConfig(w http.ResponseWriter, r *http.Request)
	// Update configuration
	// (PUT /config)
	PutConfig(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get current configuration
// (GET /config)
func (_ Unimplemented) GetConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update configuration
// (PUT /config)
func (_ Unimplemented) PutConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutConfig operation middleware
func (siw *ServerInterfaceWrapper) PutConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/config", wrapper.GetConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/config", wrapper.PutConfig)
	})

	return r
}

type GetConfigRequestObject struct {
}

type GetConfigResponseObject interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse externalRef0.Config

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig500Response struct {
}

func (response GetConfig500Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutConfigRequestObject struct {
	Body *PutConfigJSONRequestBody
}

type PutConfigResponseObject interface {
	VisitPutConfigResponse(w http.ResponseWriter) error
}

type PutConfig200Response struct {
}

func (response PutConfig200Response) VisitPutConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutConfig400Response struct {
}

func (response PutConfig400Response) VisitPutConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutConfig500Response struct {
}

func (response PutConfig500Response) VisitPutConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get current configuration
	// (GET /config)
	GetConfig(ctx context.Context, request GetConfigRequestObject) (GetConfigResponseObject, error)
	// Update configuration
	// (PUT /config)
	PutConfig(ctx context.Context, request PutConfigRequestObject) (PutConfigResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetConfig operation middleware
func (sh *strictHandler) GetConfig(w http.ResponseWriter, r *http.Request) {
	var request GetConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfig(ctx, request.(GetConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConfigResponseObject); ok {
		if err := validResponse.VisitGetConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutConfig operation middleware
func (sh *strictHandler) PutConfig(w http.ResponseWriter, r *http.Request) {
	var request PutConfigRequestObject

	var body PutConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutConfig(ctx, request.(PutConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutConfigResponseObject); ok {
		if err := validResponse.VisitPutConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./models.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
