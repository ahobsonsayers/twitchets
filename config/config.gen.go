// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"github.com/ahobsonsayers/twigots"
	"github.com/orsinium-labs/enum"
)

// Defines values for NotificationType.
var (
	notificationTypeBuilder = enum.NewBuilder[string, NotificationType]()

	NotificationTypeGotify   = notificationTypeBuilder.Add(NotificationType{"gotify"})
	NotificationTypeNtfy     = notificationTypeBuilder.Add(NotificationType{"ntfy"})
	NotificationTypeTelegram = notificationTypeBuilder.Add(NotificationType{"telegram"})

	NotificationTypes = notificationTypeBuilder.Enum()
)

// Config defines model for Config.
type Config struct {
	// APIKey REQUIRED: See README.md for details on how to obtain
	APIKey string `json:"apiKey"`

	// Country Country code.
	// Currently only GB is supported.
	Country Country `json:"country"`

	// Notification Notification service configuration
	Notification       NotificationConfig        `json:"notification"`
	GlobalTicketConfig GlobalTicketListingConfig `json:"global"`
	TicketConfigs      []TicketListingConfig     `json:"tickets"`
}

// Country Country code.
// Currently only GB is supported.
type Country = twigots.Country

// GlobalTicketListingConfig GlobalTicketListingConfig represents configuration settings that apply to all ticket listings
// unless explicitly overridden by a specific ticket configuration.
// Any setting not specified will use the default.
type GlobalTicketListingConfig struct {
	// EventSimilarity Event name similarity matching (0.0 - 1.0).
	// Default: 0.9 (allows for minor naming differences)
	EventSimilarity float64 `json:"eventSimilarity,omitempty"`

	// Regions Geographic regions to search for tickets.
	// Default: All regions if not specified.
	// Full list: https://github.com/ahobsonsayers/twigots/blob/main/location.go#L79-L90
	Regions []Region `json:"regions,omitempty"`

	// NumTickets Minimum number of tickets required in listing
	// Default: Any number of tickets.
	NumTickets int `json:"numTickets,omitempty"`

	// MinDiscount Minimum discount (including fee) on the original price as a percentage
	// Default: Any discount (including no discount).
	MinDiscount float64 `json:"discount,omitempty"`

	// MaxTicketPriceInclFee Maximum price per ticket (including fee) in pounds (£)
	// Default: Any price.
	MaxTicketPriceInclFee float64 `json:"maxTicketPrice,omitempty"`

	// Notification Notification services to use
	// Default: All configured services.
	Notification []NotificationType `json:"notification,omitempty"`
}

// GotifyConfig defines model for GotifyConfig.
type GotifyConfig struct {
	// Url Your Gotify server URL
	Url string `json:"url"`

	// Token Application token from Gotify
	Token string `json:"token"`
}

// NotificationConfig Notification service configuration
type NotificationConfig struct {
	Ntfy     *NtfyConfig     `json:"ntfy,omitempty"`
	Gotify   *GotifyConfig   `json:"gotify,omitempty"`
	Telegram *TelegramConfig `json:"telegram,omitempty"`
}

// NotificationType defines model for NotificationType.
type NotificationType enum.Member[string]

// NtfyConfig defines model for NtfyConfig.
type NtfyConfig struct {
	// Url You can use the public instance at https://ntfy.sh
	Url string `json:"url"`

	// Topic If using https://ntfy.sh, make sure this is unique to you!
	Topic string `json:"topic"`

	// Username Optional: for authenticated instances
	Username string `json:"username"`

	// Password Optional: for authenticated instances
	Password string `json:"password"`
}

// Region Region code.
// Possible values are:
// - GBLO: London
// - GBSO: South
// - GBSW: South West
// - GBSE: South East
// - GBMI: Midlands
// - GBEA: East Anglia
// - GBNO: North
// - GBNE: North East
// - GBNW: North West
// - GBSC: Scotland
// - GBWA: Wales
// - GBNI: Northern Ireland
type Region = twigots.Region

// TelegramConfig defines model for TelegramConfig.
type TelegramConfig struct {
	// Token Get from @BotFather on Telegram
	Token string `json:"token"`

	// ChatId Your chat ID or group chat ID
	ChatId int `json:"chatId"`
}

// TicketListingConfig TicketListingConfig represents configuration for specific ticket listings
// Configuration overrides global configuration
// To reset a global configuration to its default, use:
// - "" (empty string) for string values
// - [] (empty array) for list values
// - -1 for numeric values
type TicketListingConfig struct {
	// Event Event name
	Event string `json:"event"`

	// EventSimilarity Event name similarity matching (0.0 - 1.0).
	// Overrides global setting.
	EventSimilarity *float64 `json:"eventSimilarity,omitempty"`

	// Regions Geographic regions to search for tickets
	// Overrides global setting. To reset to default (all regions), use an empty array [].
	Regions []Region `json:"regions,omitempty"`

	// NumTickets Number of tickets required in listing
	// Overrides global setting. To reset to default (any number), use -1.
	NumTickets *int `json:"numTickets,omitempty"`

	// MinDiscount Minimum discount on the original price as a percentage
	// Overrides global setting. To reset to default (any discount), use -1.
	MinDiscount *float64 `json:"discount,omitempty"`

	// MaxTicketPriceInclFee Maximum price per ticket (including fee) in pounds (£)
	// Overrides global setting. To reset to default (any price), use -1.
	MaxTicketPriceInclFee *float64 `json:"maxTicketPrice,omitempty"`

	// Notification Notification services to use
	// Overrides global setting. To reset to default (all configured services), use an empty array [].
	Notification []NotificationType `json:"notification,omitempty"`
}
