// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/ahobsonsayers/twigots"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/orsinium-labs/enum"
)

// Defines values for NotificationType.
var (
	notificationTypeBuilder = enum.NewBuilder[string, NotificationType]()

	NotificationTypeGotify   = notificationTypeBuilder.Add(NotificationType{"gotify"})
	NotificationTypeNtfy     = notificationTypeBuilder.Add(NotificationType{"ntfy"})
	NotificationTypeTelegram = notificationTypeBuilder.Add(NotificationType{"telegram"})

	NotificationTypes = notificationTypeBuilder.Enum()
)

// Config defines model for Config.
type Config struct {
	// APIKey REQUIRED: See README.md for details on how to obtain
	APIKey string `json:"apiKey"`

	// Country Country code.
	// Currently only GB is supported.
	Country Country `json:"country"`

	// Notification Notification service configuration
	Notification       NotificationConfig        `json:"notification"`
	GlobalTicketConfig GlobalTicketListingConfig `json:"global"`
	TicketConfigs      []TicketListingConfig     `json:"tickets"`
}

// Country Country code.
// Currently only GB is supported.
type Country = twigots.Country

// GlobalTicketListingConfig GlobalTicketListingConfig represents configuration settings that apply to all ticket listings
// unless explicitly overridden by a specific ticket configuration.
// Any setting not specified will use the default.
type GlobalTicketListingConfig struct {
	// EventSimilarity Event name similarity matching (0.0 - 1.0).
	// Default: 0.9 (allows for minor naming differences)
	EventSimilarity float64 `json:"eventSimilarity,omitempty"`

	// Regions Geographic regions to search for tickets.
	// Default: All regions if not specified.
	// Full list: https://github.com/ahobsonsayers/twigots/blob/main/location.go#L79-L90
	Regions []Region `json:"regions,omitempty"`

	// NumTickets Minimum number of tickets required in listing
	// Default: Any number of tickets.
	NumTickets int `json:"numTickets,omitempty"`

	// MinDiscount Minimum discount (including fee) on the original price as a percentage
	// Default: Any discount (including no discount).
	MinDiscount float64 `json:"discount,omitempty"`

	// MaxTicketPriceInclFee Maximum price per ticket (including fee) in pounds (£)
	// Default: Any price.
	MaxTicketPriceInclFee float64 `json:"maxTicketPrice,omitempty"`

	// Notification Notification services to use
	// Default: All configured services.
	Notification []NotificationType `json:"notification,omitempty"`
}

// GotifyConfig defines model for GotifyConfig.
type GotifyConfig struct {
	// Url Your Gotify server URL
	Url string `json:"url"`

	// Token Application token from Gotify
	Token string `json:"token"`
}

// NotificationConfig Notification service configuration
type NotificationConfig struct {
	Ntfy     *NtfyConfig     `json:"ntfy,omitempty"`
	Gotify   *GotifyConfig   `json:"gotify,omitempty"`
	Telegram *TelegramConfig `json:"telegram,omitempty"`
}

// NotificationType defines model for NotificationType.
type NotificationType enum.Member[string]

// NtfyConfig defines model for NtfyConfig.
type NtfyConfig struct {
	// Url You can use the public instance at https://ntfy.sh
	Url string `json:"url"`

	// Topic If using https://ntfy.sh, make sure this is unique to you!
	Topic string `json:"topic"`

	// Username Optional: for authenticated instances
	Username string `json:"username"`

	// Password Optional: for authenticated instances
	Password string `json:"password"`
}

// Region Region code.
// Possible values are:
// - GBLO: London
// - GBSO: South
// - GBSW: South West
// - GBSE: South East
// - GBMI: Midlands
// - GBEA: East Anglia
// - GBNO: North
// - GBNE: North East
// - GBNW: North West
// - GBSC: Scotland
// - GBWA: Wales
// - GBNI: Northern Ireland
type Region = twigots.Region

// TelegramConfig defines model for TelegramConfig.
type TelegramConfig struct {
	// Token Get from @BotFather on Telegram
	Token string `json:"token"`

	// ChatId Your chat ID or group chat ID
	ChatId int `json:"chatId"`
}

// TicketListingConfig TicketListingConfig represents configuration for specific ticket listings
// Configuration overrides global configuration
// To reset a global configuration to its default, use:
// - "" (empty string) for string values
// - [] (empty array) for list values
// - -1 for numeric values
type TicketListingConfig struct {
	// Event Event name
	Event string `json:"event"`

	// EventSimilarity Event name similarity matching (0.0 - 1.0).
	// Overrides global setting.
	EventSimilarity *float64 `json:"eventSimilarity,omitempty"`

	// Regions Geographic regions to search for tickets
	// Overrides global setting. To reset to default (all regions), use an empty array [].
	Regions []Region `json:"regions,omitempty"`

	// NumTickets Number of tickets required in listing
	// Overrides global setting. To reset to default (any number), use -1.
	NumTickets *int `json:"numTickets,omitempty"`

	// MinDiscount Minimum discount on the original price as a percentage
	// Overrides global setting. To reset to default (any discount), use -1.
	MinDiscount *float64 `json:"discount,omitempty"`

	// MaxTicketPriceInclFee Maximum price per ticket (including fee) in pounds (£)
	// Overrides global setting. To reset to default (any price), use -1.
	MaxTicketPriceInclFee *float64 `json:"maxTicketPrice,omitempty"`

	// Notification Notification services to use
	// Overrides global setting. To reset to default (all configured services), use an empty array [].
	Notification []NotificationType `json:"notification,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kpGY+K3Q5Dr8Wf03AAD//0MQS8YqGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
