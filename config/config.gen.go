// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/ahobsonsayers/twigots"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/orsinium-labs/enum"
)

// Defines values for NotificationType.
var (
	notificationTypeBuilder = enum.NewBuilder[string, NotificationType]()

	NotificationTypeGotify   = notificationTypeBuilder.Add(NotificationType{"gotify"})
	NotificationTypeNtfy     = notificationTypeBuilder.Add(NotificationType{"ntfy"})
	NotificationTypeTelegram = notificationTypeBuilder.Add(NotificationType{"telegram"})

	NotificationTypes = notificationTypeBuilder.Enum()
)

// Config defines model for Config.
type Config struct {
	// APIKey REQUIRED: See README.md for details on how to obtain
	APIKey string `json:"apiKey"`

	// Country Country code.
	// Currently only GB is supported.
	Country Country `json:"country"`

	// Notification Notification service configuration
	Notification       NotificationConfig        `json:"notification"`
	GlobalTicketConfig GlobalTicketListingConfig `json:"global"`
	TicketConfigs      []TicketListingConfig     `json:"tickets"`
}

// Country Country code.
// Currently only GB is supported.
type Country = twigots.Country

// GlobalTicketListingConfig GlobalTicketListingConfig represents configuration settings that apply to all ticket listings
// unless explicitly overridden by a specific ticket configuration.
// Any setting not specified will use the default.
type GlobalTicketListingConfig struct {
	// EventSimilarity Event name similarity matching (0.0 - 1.0).
	// Default: 0.9 (allows for minor naming differences)
	EventSimilarity float64 `json:"eventSimilarity,omitempty"`

	// Regions Geographic regions to search for tickets.
	// Default: All regions if not specified.
	// Full list: https://github.com/ahobsonsayers/twigots/blob/main/location.go#L79-L90
	Regions []Region `json:"regions,omitempty"`

	// NumTickets Minimum number of tickets required in listing
	// Default: Any number of tickets.
	NumTickets int `json:"numTickets,omitempty"`

	// MinDiscount Minimum discount (including fee) on the original price as a percentage
	// Default: Any discount (including no discount).
	MinDiscount float64 `json:"discount,omitempty"`

	// MaxTicketPriceInclFee Maximum price per ticket (including fee) in pounds (£)
	// Default: Any price.
	MaxTicketPriceInclFee float64 `json:"maxTicketPrice,omitempty"`

	// Notification Notification services to use
	// Default: All configured services.
	Notification []NotificationType `json:"notification,omitempty"`
}

// GotifyConfig defines model for GotifyConfig.
type GotifyConfig struct {
	// Url Your Gotify server URL
	Url string `json:"url"`

	// Token Application token from Gotify
	Token string `json:"token"`
}

// NotificationConfig Notification service configuration
type NotificationConfig struct {
	Ntfy     *NtfyConfig     `json:"ntfy,omitempty"`
	Gotify   *GotifyConfig   `json:"gotify,omitempty"`
	Telegram *TelegramConfig `json:"telegram,omitempty"`
}

// NotificationType defines model for NotificationType.
type NotificationType enum.Member[string]

// Notifications defines model for Notifications.
type Notifications []NotificationType

// NtfyConfig defines model for NtfyConfig.
type NtfyConfig struct {
	// Url You can use the public instance at https://ntfy.sh
	Url string `json:"url"`

	// Topic If using https://ntfy.sh, make sure this is unique to you!
	Topic string `json:"topic"`

	// Username Optional: for authenticated instances
	Username string `json:"username"`

	// Password Optional: for authenticated instances
	Password string `json:"password"`
}

// Region Region code.
// Possible values are:
// - GBLO: London
// - GBSO: South
// - GBSW: South West
// - GBSE: South East
// - GBMI: Midlands
// - GBEA: East Anglia
// - GBNO: North
// - GBNE: North East
// - GBNW: North West
// - GBSC: Scotland
// - GBWA: Wales
// - GBNI: Northern Ireland
type Region = twigots.Region

// Regions defines model for Regions.
type Regions []Region

// TelegramConfig defines model for TelegramConfig.
type TelegramConfig struct {
	// Token Get from @BotFather on Telegram
	Token string `json:"token"`

	// ChatId Your chat ID or group chat ID
	ChatId int `json:"chatId"`
}

// TicketListingConfig TicketListingConfig represents configuration for specific ticket listings
// Configuration overrides global configuration
// To reset a global configuration to its default, use:
// - "" (empty string) for string values
// - [] (empty array) for list values
// - -1 for numeric values
type TicketListingConfig struct {
	// Event Event name
	Event string `json:"event"`

	// EventSimilarity Event name similarity matching (0.0 - 1.0).
	// Overrides global setting.
	EventSimilarity *float64 `json:"eventSimilarity,omitempty"`

	// Regions Geographic regions to search for tickets
	// Overrides global setting. To reset to default (all regions), use an empty array [].
	Regions Regions `json:"regions,omitzero"`

	// NumTickets Number of tickets required in listing
	// Overrides global setting. To reset to default (any number), use -1.
	NumTickets *int `json:"numTickets,omitempty"`

	// MinDiscount Minimum discount on the original price as a percentage
	// Overrides global setting. To reset to default (any discount), use -1.
	MinDiscount *float64 `json:"discount,omitempty"`

	// MaxTicketPriceInclFee Maximum price per ticket (including fee) in pounds (£)
	// Overrides global setting. To reset to default (any price), use -1.
	MaxTicketPriceInclFee *float64 `json:"maxTicketPrice,omitempty"`

	// Notification Notification services to use
	// Overrides global setting. To reset to default (all configured services), use an empty array [].
	Notification Notifications `json:"notification,omitzero"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"alY6fNn8LwAA//9ytJIc/hgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
